package br.org.serratec.biblioteca.exception;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import jakarta.validation.ConstraintViolationException;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.validation.FieldError;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@ControllerAdvice
public class ControllerExceptionHandler extends ResponseEntityExceptionHandler {

    protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
                                                                  HttpHeaders headers, HttpStatus status, WebRequest request) {
        List<String> erros = new ArrayList<>();
        for (FieldError e : ex.getBindingResult().getFieldErrors()) {
            erros.add(e.getField() + " : " + e.getDefaultMessage());
        }

        ErroResposta erro = new ErroResposta(status.value(), "Existem campos inválidos", LocalDateTime.now(), erros);
        return super.handleExceptionInternal(ex, erro, headers, status, request);
    }

    protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
                                                                  HttpHeaders headers, HttpStatus status, WebRequest request) {
        return ResponseEntity.badRequest().body("Erro: " + ex.getMessage());
    }

    @ExceptionHandler(ConstraintViolationException.class)
    public ResponseEntity<ErroResposta> handleConstraintViolation(ConstraintViolationException ex) {
        List<String> erros = new ArrayList<>();
        ex.getConstraintViolations().forEach(violation ->
            erros.add(violation.getPropertyPath() + ": " + violation.getMessage())
        );

        ErroResposta erro = new ErroResposta(HttpStatus.BAD_REQUEST.value(), "Existem campos inválidos", LocalDateTime.now(), erros);
        return ResponseEntity.badRequest().body(erro);
    }
}
