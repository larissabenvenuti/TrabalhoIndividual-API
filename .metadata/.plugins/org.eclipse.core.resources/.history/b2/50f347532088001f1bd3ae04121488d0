package br.org.serratec.biblioteca.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import br.org.serratec.biblioteca.domain.Livro;
import br.org.serratec.biblioteca.repository.LivroRepository;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/publicacao")
public class PublicacaoController {

	@Autowired
	private PublicacaoRepository publicacaoRepository;
	
	@GetMapping
	public ResponseEntity<List<Livro>> listar(){
		return ResponseEntity.ok(publicacaoRepository.findAll());
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Publicacao> buscar(@PathVariable Long id){
		Optional<Publicacao> livroOpt = publicacaoRepository.findById(id);
		
		if (!livroOpt.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok(livroOpt.get());
	}

	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Livro inserir(@Valid @RequestBody Publicacao publicacao) {
		return publicacaoRepository.save(publicacao);
	}

	@PutMapping("/{id}")
	public ResponseEntity<Publicacao> atualizar(@Valid @PathVariable Long id, @RequestBody Livro livro) {
		if (!publicacaoRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		livro.setId(id);
		return ResponseEntity.ok(publicacaoRepository.save(livro));
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deletar(@PathVariable Long id) {
		if (!publicacaoRepository.existsById(id)) {
			return ResponseEntity.notFound().build();
		}
		publicacaoRepository.deleteById(id);
		return ResponseEntity.ok().build();
	}
	
}
